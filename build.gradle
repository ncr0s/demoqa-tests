plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
}

def allureVersion = "2.20.1",
    slf4jVersion = "2.0.6"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation (
            "com.codeborne:selenide:6.8.1",
            "org.junit.jupiter:junit-jupiter-api:5.9.2",
            "com.github.javafaker:javafaker:1.0.2",
            "io.qameta.allure:allure-selenide:$allureVersion"
    )
    testRuntimeOnly(
            "org.slf4j:slf4j-simple:$slf4jVersion",
            "org.junit.jupiter:junit-jupiter-engine:5.9.2"
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties()) //transfer system properties from build command inside of code
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task remote_ui(type: Test) {
    useJUnitPlatform {
        includeTags("UI")
    }
}


task one_prop_test(type: Test) {
    useJUnitPlatform {
        includeTags("one_property")
    }
}

task hello_test(type: Test) {
    useJUnitPlatform {
        includeTags("hello")
    }
}

task two_test(type: Test) {
    useJUnitPlatform {
        includeTags("hello", "one_property")
    }
}
